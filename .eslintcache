[{"C:\\Users\\chris\\Documents\\train_app\\src\\index.js":"1","C:\\Users\\chris\\Documents\\train_app\\src\\App.js":"2","C:\\Users\\chris\\Documents\\train_app\\src\\reportWebVitals.js":"3","C:\\Users\\chris\\Documents\\train_app\\src\\StationInfo.js":"4","C:\\Users\\chris\\Documents\\train_app\\src\\StationList.js":"5","C:\\Users\\chris\\Documents\\train_app\\src\\TrainInfo.js":"6","C:\\Users\\chris\\Documents\\train_app\\src\\RoutePlanner.js":"7"},{"size":500,"mtime":1606743669343,"results":"8","hashOfConfig":"9"},{"size":697,"mtime":1608200455455,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606312170302,"results":"11","hashOfConfig":"9"},{"size":5720,"mtime":1607348815676,"results":"12","hashOfConfig":"9"},{"size":2399,"mtime":1607346396172,"results":"13","hashOfConfig":"9"},{"size":3820,"mtime":1607348793095,"results":"14","hashOfConfig":"9"},{"size":4108,"mtime":1608136538814,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"sth8qz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"C:\\Users\\chris\\Documents\\train_app\\src\\index.js",[],["32","33"],"C:\\Users\\chris\\Documents\\train_app\\src\\App.js",[],"C:\\Users\\chris\\Documents\\train_app\\src\\reportWebVitals.js",[],"C:\\Users\\chris\\Documents\\train_app\\src\\StationInfo.js",[],"C:\\Users\\chris\\Documents\\train_app\\src\\StationList.js",[],"C:\\Users\\chris\\Documents\\train_app\\src\\TrainInfo.js",[],"C:\\Users\\chris\\Documents\\train_app\\src\\RoutePlanner.js",["34"],"const React = require('react');\r\nconst fetch = require(\"node-fetch\");\r\nconst parseString = require('xml2js').parseString;\r\n\r\nexport class RoutePlanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTrains: {},\r\n            hasCurrentTrains: false,\r\n            trainMap: new Map(),\r\n            trainMapLoaded: false\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        await fetch(\r\n            `http://api.irishrail.ie/realtime/realtime.asmx/getCurrentTrainsXML`\r\n            )\r\n            .then(response => response.text())\r\n            .then(str => parseString(str, function (err, result) {\r\n                try {\r\n                    this.setState({\r\n                        currentTrains: JSON.stringify(result.ArrayOfObjTrainPositions.objTrainPositions),\r\n                        hasCurrentTrains: true\r\n                    });\r\n                } catch (error) {\r\n                    console.log(error.message);\r\n                }\r\n        }.bind(this)));\r\n        let a = new Map()\r\n        await JSON.parse(this.state.currentTrains).map((train) => (\r\n            fetch(\r\n                `http://api.irishrail.ie/realtime/realtime.asmx/getTrainMovementsXML?TrainId=${train.TrainCode[0]}&TrainDate=`\r\n                )\r\n                .then(response => response.text())\r\n                .then(str => parseString(str, function (err, result) {\r\n                    try {\r\n                        a.set(train.TrainCode[0], result.ArrayOfObjTrainMovements.objTrainMovements);\r\n                    } catch (error) {\r\n                        console.log(error.message);\r\n                    }\r\n                }))\r\n                .then(() => {\r\n                    if (a.size <= JSON.parse(this.state.currentTrains).length-1) {\r\n                        this.setState({\r\n                            trainMap: a,\r\n                            trainMapLoaded: true\r\n                        });\r\n                    }\r\n                })\r\n        ));\r\n    }\r\n\r\n    getStationList(v) {\r\n        let out = [];\r\n        v.forEach((val, k) => {\r\n            out.push(val.LocationFullName[0]);\r\n        });\r\n        return out;\r\n    }\r\n\r\n\r\n    // DFS like algorithm to find route\r\n    getRoute(s1, t1, s2, t2, out) {\r\n        if (s1 === s2) {\r\n            return null;\r\n        }\r\n        let m = new Map(this.state.trainMap);\r\n        for(let [code, train] of m) {\r\n            let a = this.getStationList(train);\r\n            if (a.includes(s1) && a.includes(s2)) {\r\n                out.push(code);\r\n                return out;\r\n            }\r\n        };\r\n\r\n        for(let [code, train] of m) {\r\n            let a = this.getStationList(train);\r\n            if ((a.includes(\"Dublin Connolly\") || a.includes(\"Dublin Heuston\")) && a.includes(s1)) {\r\n                for(let [code1, train1] of m) {\r\n                    let a1 = this.getStationList(train1);\r\n                    if (a1.includes(s2) && a1.includes(\"Dublin Connolly\")) {\r\n                        out.push(code1);\r\n                        out.push(code);\r\n                        return out;\r\n                    } else if (a1.includes(s2) && a1.includes(\"Dublin Heuston\")) {\r\n                        out.push(code1);\r\n                        out.push(code);\r\n                        return out;\r\n                    }\r\n                };\r\n            }\r\n        };\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const { trainMapLoaded, trainMap } = this.state;\r\n        if (!trainMapLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            let p = this.getRoute(\"Arklow\", 1, \"Maynooth\", 1, []);\r\n            if (p != null) {\r\n                return (\r\n                    <div class=\"table-responsive-md\">\r\n                        <p>Take the following trains:</p>\r\n                        {p.map((t) => (\r\n                            <p>{ t }</p>\r\n                        ))}\r\n                    </div>\r\n                );\r\n            } else {\r\n                return <div>Loading...</div>; \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":98,"column":33,"nodeType":"41","messageId":"42","endLine":98,"endColumn":41},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'trainMap' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]